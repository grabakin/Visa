// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisaBack.Data;

#nullable disable

namespace VisaBack.Migrations
{
    [DbContext(typeof(VisaDbContext))]
    [Migration("20250529044854_reloadDb")]
    partial class reloadDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("VisaBack.Models.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("PassportData")
                        .HasColumnType("TEXT")
                        .HasColumnName("passport_data");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Постоянный клиент",
                            Email = "ivanov@mail.ru",
                            FormattedId = "CL001",
                            FullName = "Иванов Иван Иванович",
                            PassportData = "4500 123456",
                            Phone = "+7 (916) 123-45-67",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Новый клиент",
                            Email = "petrova@gmail.com",
                            FormattedId = "CL002",
                            FullName = "Петрова Анна Сергеевна",
                            PassportData = "4511 654321",
                            Phone = "+7 (926) 987-65-43",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sidorov@yandex.ru",
                            FormattedId = "CL003",
                            FullName = "Сидоров Алексей Петрович",
                            PassportData = "4522 112233",
                            Phone = "+7 (903) 555-55-55",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("document_id");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("DocFile")
                        .HasColumnType("BLOB")
                        .HasColumnName("doc_file");

                    b.Property<string>("DocType")
                        .HasColumnType("TEXT")
                        .HasColumnName("doc_type");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_id");

                    b.Property<string>("ChangedData")
                        .HasColumnType("TEXT")
                        .HasColumnName("changed_data");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_type");

                    b.Property<int?>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("table_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("TEXT")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_date");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int>("WorkerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Cost = 12000m,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Оформление туристической визы во Францию",
                            FormattedId = "OR001",
                            OrderDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 1,
                            Status = "В обработке",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Cost = 15000m,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Оформление шенгенской визы в Италию",
                            FormattedId = "OR002",
                            OrderDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 3,
                            Status = "Выполнен",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkerId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Cost = 35000m,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Оформление бизнес визы в США",
                            FormattedId = "OR003",
                            OrderDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 2,
                            Status = "Новый",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("VisaBack.Models.Entities.ReportTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("template_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("template_type");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("report_templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Стандартная анкета для оформления визы",
                            FilePath = "sample_template.docx",
                            Name = "Визовая анкета",
                            TemplateType = "visa_application",
                            UpdatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Документ для оформления разрешения на работу",
                            FilePath = "sample_template.docx",
                            Name = "Разрешение на работу",
                            TemplateType = "work_permit",
                            UpdatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Отчет об истории поездок клиента",
                            FilePath = "sample_template.docx",
                            Name = "История поездок",
                            TemplateType = "travel_history",
                            UpdatedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("service_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("StandardDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("standard_duration");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("VisaType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("visa_type");

                    b.HasKey("Id");

                    b.ToTable("services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Франция",
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormattedId = "SV001",
                            Price = 12000m,
                            StandardDuration = 14,
                            Status = "Активна",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisaType = "Туристическая"
                        },
                        new
                        {
                            Id = 2,
                            Country = "США",
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormattedId = "SV002",
                            Price = 35000m,
                            StandardDuration = 30,
                            Status = "Активна",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisaType = "Бизнес"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Италия",
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormattedId = "SV003",
                            Price = 15000m,
                            StandardDuration = 90,
                            Status = "Активна",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisaType = "Шенген"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Япония",
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormattedId = "SV004",
                            Price = 25000m,
                            StandardDuration = 180,
                            Status = "Активна",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisaType = "Рабочая"
                        });
                });

            modelBuilder.Entity("VisaBack.Models.Entities.ServicePriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("price_history_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("changed_at");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("new_price");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("old_price");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("service_price_history");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("worker_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FormattedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("formatted_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("position");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Email = "smirnov@visa.ru",
                            FormattedId = "WK001",
                            FullName = "Смирнов Дмитрий Александрович",
                            Phone = "+7 (916) 111-22-33",
                            Position = "Старший менеджер",
                            Status = "Активен",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Email = "kuznetsova@visa.ru",
                            FormattedId = "WK002",
                            FullName = "Кузнецова Елена Викторовна",
                            Phone = "+7 (926) 444-55-66",
                            Position = "Менеджер",
                            Status = "Активен",
                            UpdatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Document", b =>
                {
                    b.HasOne("VisaBack.Models.Entities.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId");

                    b.HasOne("VisaBack.Models.Entities.Order", "Order")
                        .WithMany("Documents")
                        .HasForeignKey("OrderId");

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Log", b =>
                {
                    b.HasOne("VisaBack.Models.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Order", b =>
                {
                    b.HasOne("VisaBack.Models.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaBack.Models.Entities.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisaBack.Models.Entities.Worker", "Worker")
                        .WithMany("Orders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.ServicePriceHistory", b =>
                {
                    b.HasOne("VisaBack.Models.Entities.Service", "Service")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Client", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Order", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Service", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.User", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("VisaBack.Models.Entities.Worker", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
